=================================================================================
One-To-One - Unidirectional


@Entity
public class CourseMaterial {
   ...

	@OneToOne(optional = false)
	@JoinColumn(name = "COURSE_ID", referencedColumnName = "ID")
	private Course course;
}


One-To-One - Bidirectional

@Entity
@Table(name = "classes")
public class Course{
	
	@OneToOne(mappedBy = "course", targetEntity = CourseMaterial.class)
	private CourseMaterial material;
}
=================================================================================

Many-To-One Unidirectional

@Entity
public class Course {
    // ...
    
    @ManyToOne
    @JoinColumn(name = "TEACHER_ID", referencedColumnName = "ID")
    private Teacher teacher;
}

Many-To-One Bidirectional

@Entity
public class Teacher {
    // ...

    @OneToMany(mappedBy = "teacher", targetEntity = Course.class, 
		fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    private List<Course> courses;
}


===================================================================================

Many-To-Many Unidirectional

@Table(name = "courses")
public class Course {
	...
	@ManyToMany
	@JoinTable(
	  name = "STUDENTS_COURSES",
	  joinColumns = @JoinColumn(name = "COURSE_ID", referencedColumnName = "ID"),
	  inverseJoinColumns = @JoinColumn(name = "STUDENT_ID", referencedColumnName = "ID")
	)
	private List<Student> students;
	...
}


Many-To-Many Bidirectional

@Entity
@Table(name = "students")
public class Student {
	...
	@ManyToMany(mappedBy = "students", targetEntity = Course.class)
	private Set<Course> courses;
	...
}


=====================================================================================